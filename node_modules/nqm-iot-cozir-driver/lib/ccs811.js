module.exports = (function() {
const SerialPort = require('serialport');
const serialport = SerialPort.SerialPort;  
const filesystem = require('fs');
const util = require("util");
const eventEmitter = require('events').EventEmitter;
var console = { log: require("debug")("ccs811") };

function sensor(config) {
	eventEmitter.call(this);
	console.log('received config parameters are '+ JSON.stringify(config));
    this._config = config;
	this._serialPort = null;
	this._timer = 0;
	this._co2 = 0;
	this._tvoc = 0;
	this._temperature = 0;
	this._humidity = 0;
}

util.inherits(sensor, eventEmitter);

var log;

sensor.prototype.start = function(){
	var self = this;
	var port = new serialport('/dev/ttyUSB0', {
		baudrate: 38400,
		parser: SerialPort.parsers.readline('\n')
	});

	port.on('open', function() {
	log = filesystem.createWriteStream(
			'/home/junming/Documents/AVR/testold.txt',
			{flags: 'w'});
	console.log("Serial Port Opened" + "\n");
});

	port.on('data', function(data) {
		onDataReceived.call(self, data);
	});
}

var onDataReceived = function(data) {
	var self = this;
	switch (data[0]) {
		case "C":
			var co2 = parseInt(data.substr(3));
			if (co2 !== this._co2) {
				this._co2 = co2;
				//log.write(Date.now(), co2);
				//console.log(Date.now(), co2);
				this.emit("data", this._config.feedId, { timestamp: Date.now(), co2: co2 });
			}
			break;

		case "V":
			var tvoc = parseInt(data.substr(3));
			if (tvoc !== this._tvoc) {
				this._tvoc = tvoc;
				this.emit("data",this._config.feedId, { timestamp: Date.now(), tvoc: tvoc });
			}
			break;

		case "H":
			var humidity = parseInt(data.substr(3));
			if (humidity !== this._humidity) {
				this._humidity = humidity;
				this.emit("data",this._config.feedId, { timestamp: Date.now(), humidity: humidity  });
			}
			break;	
		case "T":	
			var temp = parseInt(data.substr(3));
			if (temp !== this._temp) {
				this._temp = temp;
				this.emit("data",this._config.feedId, { timestamp: Date.now(), temp: temp });
			}
			break;		

		default:
			console.log("ignoring data: " + data + "\n");			
			break;
			}
};
return sensor;
}());
